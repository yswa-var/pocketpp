import logging
import requests
from newspaper import Article as NewsArticle

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def scrape_and_summarize(url):
    logger.info(f"Starting to scrape URL: {url}")
    try:
        # Scrape article with newspaper3k
        article = NewsArticle(url)
        article.download()
        logger.info("Article downloaded successfully")
        article.parse()
        logger.info("Article parsed successfully")

        # Summarize with Gemma
        summary = get_gemma_summary(article.text)
        logger.info("Summary generated by Gemma")

        # Categorize with Gemma
        category = get_gemma_category(article.text)
        logger.info(f"Category suggested by Gemma: {category}")

        data = {
            "title": article.title,
            "content": article.text,
            "summary": summary,
            "image_url": article.top_image,
            "url": url,
            "category": category
        }
        logger.info(
            f"Scraped data: Title={data['title']}, Category={data['category']}")
        return data
    except Exception as e:
        logger.error(f"Error during scraping: {e}", exc_info=True)
        raise


def get_gemma_summary(text):
    logger.info("Requesting summary from Gemma")
    try:
        # Truncate for API
        prompt = f"Summarize this article in 50-100 words:\n\n{text[:2000]}"
        response = requests.post(
            "http://localhost:1234/v1/chat/completions",
            headers={"Content-Type": "application/json"},
            json={
                "model": "gemma-3-4b-it",
                "messages": [
                    {"role": "system", "content": "You are a helpful assistant that summarizes articles concisely."},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 150,
                "stream": False
            }
        )
        response.raise_for_status()
        summary = response.json()["choices"][0]["message"]["content"].strip()
        logger.info(f"Gemma summary: {summary}")
        return summary
    except Exception as e:
        logger.error(
            f"Error generating summary with Gemma: {e}", exc_info=True)
        raise


def get_gemma_category(text):
    logger.info("Requesting category from Gemma")
    try:
        # Truncate for API
        prompt = f"Based on this article, suggest a single category (e.g., History, Politics, Science):\n\n{text[:2000]}"
        response = requests.post(
            "http://localhost:1234/v1/chat/completions",
            headers={"Content-Type": "application/json"},
            json={
                "model": "gemma-3-4b-it",
                "messages": [
                    {"role": "system", "content": "You are a helpful assistant that categorizes articles accurately."},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 50,
                "stream": False
            }
        )
        response.raise_for_status()
        category = response.json()["choices"][0]["message"]["content"].strip()
        logger.info(f"Gemma category: {category}")
        return category
    except Exception as e:
        logger.error(
            f"Error generating category with Gemma: {e}", exc_info=True)
        raise
